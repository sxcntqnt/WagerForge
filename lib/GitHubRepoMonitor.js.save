import fs from 'fs';
import path from 'path';
import axios from 'axios';
import yaml from "js-yaml";
import logger from './logger.js';
import { createHash } from 'crypto';

const { readFileSync, existsSync, readdirSync } = fs;

export class GitHubRepoMonitor {
  constructor(
    repoOwner,
    repoName,
    folderPath,           // e.g. "EMC" (the directory in the repo you care about)
    localBasePath = './EMC',
    configFileName = 'config.yaml',
    pollInterval = 60000
  ) {
    this.repoOwner = repoOwner;
    this.repoName = repoName;
    this.folderPath = folderPath;
    this.localBasePath = localBasePath;
    this.configFileName = configFileName;
    this.pollInterval = pollInterval;

    this.lastDownloadedCommit = null;
  }

  /**
   * Download the repository archive (zip) at `ref` (branch or commit SHA),
   * extract only the `folderPath` directory inside it, and store under localBasePath.
   */
  async downloadAndExtract(ref = 'main') {
    const zipUrl = `https://api.github.com/repos/${this.repoOwner}/${this.repoName}/zipball/${ref}`;
    logger.info(`Downloading repo archive from ${zipUrl}`);

    const response = await axios.get(zipUrl, {
      responseType: 'arraybuffer',
      headers: {
        'Accept': 'application/vnd.github.v3+json',
        // Add Authorization header if private repo, e.g.
        // 'Authorization': `Bearer ${process.env.GITHUB_TOKEN}`
      },
      maxRedirects: 5,
    });

    const zipBuffer = Buffer.from(response.data);
    const zip = new AdmZip(zipBuffer);
    const zipEntries = zip.getEntries();

    // The zip when extracted usually has a top-level folder name like `repo‑name-<sha>/...`
    // We'll scan entries and find those inside `<top>/${this.folderPath}/...`
    const basePrefix = zipEntries[0].entryName.split('/')[0];  // e.g. "repo‑name-abcdef"
    const targetPrefix = `${basePrefix}/${this.folderPath}/`;

    logger.info(`Extracting entries under prefix ${targetPrefix}`);

    // Prepare local folder
    const localFolderRoot = this.localBasePath;
    if (!existsSync(localFolderRoot)) {
      mkdirSync(localFolderRoot, { recursive: true });
    }

    for (const entry of zipEntries) {
      const name = entry.entryName;
      if (!name.startsWith(targetPrefix)) continue;

      // Compute relative path inside EMC
      const relPath = name.substring(targetPrefix.length);
      if (!relPath) continue;  // skip the folder itself

      const targetPath = path.join(localFolderRoot, relPath);
      if (entry.isDirectory) {
        // ensure the directory exists
        mkdirSync(targetPath, { recursive: true });
      } else {
        // entry is a file — extract it
        const parent = path.dirname(targetPath);
        if (!existsSync(parent)) {
          mkdirSync(parent, { recursive: true });
        }
        fs.writeFileSync(targetPath, entry.getData());
      }
    }

    logger.info(`Extraction complete for ${this.folderPath} under ${localFolderRoot}
